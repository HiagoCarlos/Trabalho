<!DOCTYPE html>
<html lang="pt-BR" data-theme="<%= userPreferences?.theme || 'light' %>">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/auth.css">
    <style>
        /* Estilos para o tema escuro/claro */
        :root {
            --primary-color: #4a6bff;
            --primary-hover: #3a5bef;
            --background: #ffffff;
            --card-bg: #f8f9fa;
            --text-color: #333333;
            --text-secondary: #666666;
            --border-color: #e0e0e0;
            --input-bg: #ffffff;
            --input-border: #dddddd;
            --error-bg: #fff0f0;
            --error-text: #d32f2f;
            --success-bg: #f0fff0;
            --success-text: #2e7d32;
        }

        [data-theme="dark"] {
            --primary-color: #5d7dff;
            --primary-hover: #4a6bff;
            --background: #1a1a1a;
            --card-bg: #2d2d2d;
            --text-color: #f0f0f0;
            --text-secondary: #cccccc;
            --border-color: #444444;
            --input-bg: #333333;
            --input-border: #555555;
            --error-bg: #2a1a1a;
            --error-text: #ff6b6b;
            --success-bg: #1a2a1a;
            --success-text: #6bff6b;
        }

        /* Estilo para o toggle de tema */
        .theme-toggle-container {
            position: absolute;
            top: 20px;
            right: 20px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .theme-toggle {
            position: relative;
            display: inline-block;
            width: 50px;
            height: 24px;
        }

        .theme-toggle input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .theme-slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: .4s;
            border-radius: 24px;
        }

        .theme-slider:before {
            position: absolute;
            content: "";
            height: 16px;
            width: 16px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }

        input:checked + .theme-slider {
            background-color: var(--primary-color);
        }

        input:checked + .theme-slider:before {
            transform: translateX(26px);
        }

        .theme-icon {
            font-size: 18px;
        }
    </style>
</head>
<body>
    <div class="auth-container">
        <!-- Toggle de tema -->
        <div class="theme-toggle-container">
            <span class="theme-icon">üåô</span>
            <label class="theme-toggle">
                <input type="checkbox" id="theme-toggle" <%= userPreferences?.theme === 'dark' ? 'checked' : '' %>>
                <span class="theme-slider"></span>
            </label>
            <span class="theme-icon">‚òÄÔ∏è</span>
        </div>

        <div class="auth-card">
            <header class="auth-header">
                <h1 class="auth-title"><%= title %></h1>
                <p class="auth-subtitle">Acesse sua conta ou registre-se gratuitamente.</p>
            </header>

            <nav class="auth-tabs">
                <a href="#login" class="auth-tab <%= activeTab === 'login' ? 'active' : '' %>" data-tab="login">Login</a>
                <a href="#register" class="auth-tab <%= activeTab === 'register' ? 'active' : '' %>" data-tab="register">Registrar</a>
            </nav>

            <div class="auth-content">
                <% if (messages.error && messages.error.length > 0) { %>
                    <div class="alert alert-error">
                        <span class="alert-icon">‚ö†Ô∏è</span> <%= messages.error[0] %>
                    </div>
                <% } %>
                <% if (messages.success && messages.success.length > 0) { %>
                    <div class="alert alert-success">
                        <span class="alert-icon">‚úÖ</span> <%= messages.success[0] %>
                    </div>
                <% } %>

                <form id="login-form" action="/login" method="POST" class="auth-form <%= activeTab === 'login' ? '' : 'hidden' %>" novalidate>
                    <input type="hidden" name="_csrf" value="<%= csrfToken %>">
                    <div class="form-group">
                        <label for="login-email" class="form-label">Email</label>
                        <input type="email" id="login-email" name="email" class="form-control" 
                               value="<%= formData && formData.email ? formData.email : '' %>" required>
                    </div>
                    <div class="form-group">
                        <label for="login-password" class="form-label">Senha</label>
                        <input type="password" id="login-password" name="password" class="form-control" required>
                    </div>
                    <div class="form-group">
                        <input type="checkbox" id="rememberMe" name="rememberMe" value="true" 
                               <%= formData && formData.rememberMe ? 'checked' : '' %>>
                        <label for="rememberMe" class="form-label" style="display: inline; margin-left: 8px; font-weight: normal;">
                            Lembrar de mim
                        </label>
                    </div>
                    <button type="submit" class="btn btn-primary">
                        <span class="btn-text">Entrar</span>
                    </button>
                    <div class="auth-footer" style="margin-top: 15px;">
                        <a href="#" class="auth-link">Esqueceu sua senha?</a>
                    </div>
                </form>

                <form id="register-form" action="/register" method="POST" class="auth-form <%= activeTab === 'register' ? '' : 'hidden' %>" novalidate>
                    <input type="hidden" name="_csrf" value="<%= csrfToken %>">
                    <div class="form-group">
                        <label for="register-name" class="form-label">Nome</label>
                        <input type="text" id="register-name" name="name" class="form-control" 
                               value="<%= formData && formData.name ? formData.name : '' %>" required>
                    </div>
                    <div class="form-group">
                        <label for="register-email" class="form-label">Email</label>
                        <input type="email" id="register-email" name="email" class="form-control" 
                               value="<%= formData && formData.email && activeTab === 'register' ? formData.email : '' %>" required>
                    </div>
                    <div class="form-group">
                        <label for="register-password" class="form-label">Senha</label>
                        <input type="password" id="register-password" name="password" class="form-control" required>
                        <small class="password-hint">M√≠nimo de 6 caracteres.</small>
                    </div>
                    <div class="form-group">
                        <label for="confirmPassword" class="form-label">Confirmar Senha</label>
                        <input type="password" id="confirmPassword" name="confirmPassword" class="form-control" required>
                    </div>
                    <button type="submit" class="btn btn-primary">
                        <span class="btn-text">Criar Conta</span>
                    </button>
                </form>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Gerenciamento de abas
            const tabs = document.querySelectorAll('.auth-tab');
            const loginForm = document.getElementById('login-form');
            const registerForm = document.getElementById('register-form');

            function setActiveTab(targetTabId) {
                tabs.forEach(tab => {
                    if (tab.getAttribute('data-tab') === targetTabId) {
                        tab.classList.add('active');
                    } else {
                        tab.classList.remove('active');
                    }
                });

                if (targetTabId === 'login') {
                    loginForm.classList.remove('hidden');
                    registerForm.classList.add('hidden');
                } else if (targetTabId === 'register') {
                    loginForm.classList.add('hidden');
                    registerForm.classList.remove('hidden');
                }
            }

            // Set initial tab based on URL hash or activeTab variable from backend
            let initialTab = '<%= activeTab %>';
            if (window.location.hash) {
                const hashTab = window.location.hash.substring(1);
                if (hashTab === 'login' || hashTab === 'register') {
                    initialTab = hashTab;
                }
            }
            setActiveTab(initialTab);

            tabs.forEach(tab => {
                tab.addEventListener('click', function(event) {
                    event.preventDefault();
                    const targetTabId = this.getAttribute('data-tab');
                    setActiveTab(targetTabId);
                    window.location.hash = targetTabId;
                });
            });

            window.addEventListener('hashchange', function() {
                const hashTab = window.location.hash.substring(1);
                if (hashTab === 'login' || hashTab === 'register') {
                    setActiveTab(hashTab);
                } else if (!hashTab) {
                    setActiveTab('<%= activeTab %>');
                }
            });

            // Gerenciamento do tema
            const themeToggle = document.getElementById('theme-toggle');
            const htmlElement = document.documentElement;

            // Verificar prefer√™ncia salva no localStorage
            const savedTheme = localStorage.getItem('theme');
            if (savedTheme) {
                htmlElement.setAttribute('data-theme', savedTheme);
                themeToggle.checked = savedTheme === 'dark';
            }

            // Alternar tema
            themeToggle.addEventListener('change', function() {
                const newTheme = this.checked ? 'dark' : 'light';
                htmlElement.setAttribute('data-theme', newTheme);
                localStorage.setItem('theme', newTheme);
                
                // Salvar prefer√™ncia no servidor se o usu√°rio estiver logado
                if ('<%= !!user %>' === 'true') {
                    saveThemePreference(newTheme);
                }
            });

            // Fun√ß√£o para salvar prefer√™ncia de tema no servidor
            function saveThemePreference(theme) {
                fetch('/auth/save-preferences', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'CSRF-Token': '<%= csrfToken %>'
                    },
                    body: JSON.stringify({ theme: theme })
                })
                .then(response => response.json())
                .then(data => {
                    if (!data.success) {
                        console.error('Erro ao salvar prefer√™ncia de tema');
                    }
                })
                .catch(error => {
                    console.error('Erro:', error);
                });
            }

            // Valida√ß√£o de formul√°rio
            const forms = document.querySelectorAll('form');
            forms.forEach(form => {
                form.addEventListener('submit', function(event) {
                    if (!form.checkValidity()) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                    form.classList.add('was-validated');
                }, false);
            });

            // Verificar se h√° cookie de autentica√ß√£o para redirecionamento autom√°tico
            checkAuthCookie();
        });

        function checkAuthCookie() {
            fetch('/auth/check-auth')
                .then(response => response.json())
                .then(data => {
                    if (data.authenticated) {
                        window.location.href = '/tasks';
                    }
                });
        }
    </script>
</body>
</html>